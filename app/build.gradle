import org.gradle.internal.logging.text.StyledTextOutputFactory

import static org.gradle.internal.logging.text.StyledTextOutput.Style

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-allopen'
apply plugin: 'jacoco'

def libraries = rootProject.ext.libraries
def configuration = rootProject.ext.configuration

allOpen {
	annotation "${configuration.package}.testing.OpenClass"
}

android {
	compileSdkVersion configuration.compileSdkVersion
	defaultConfig {
		applicationId configuration.package

		minSdkVersion configuration.minSdkVersion
		targetSdkVersion configuration.targetSdkVersion

		versionCode rootProject.ext.versionCode
		versionName rootProject.ext.versionName

		buildConfigField "int", "MIN_SDK_VERSION", "$minSdkVersion.apiLevel"
		buildConfigField "int", "MAX_SDK_VERSION", "$targetSdkVersion.apiLevel"

		testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
	}

	buildTypes {
		release {
			minifyEnabled true
			proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
		}
		debug {
			testCoverageEnabled true
			minifyEnabled false
			useProguard false
			proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
		}
	}

	flavorDimensions "version"

	dataBinding {
		enabled true
	}

	sourceSets {
		def shared = "$projectDir/src/shared/java"

		main.java.srcDirs += [configuration.package]

		test.java.srcDirs += shared
		androidTest.java.srcDirs += shared

	}

	compileOptions {
		sourceCompatibility JavaVersion.VERSION_1_8
		targetCompatibility JavaVersion.VERSION_1_8
	}

	testOptions {
		unitTests.all {
			jacoco {
				includeNoLocationClasses = true
			}
		}
		unitTests {
			includeAndroidResources = true
		}
	}

}

jacoco {
	toolVersion = "${libraries.jacoco}"
}

task clearJacocoReport(type: Delete) {
	delete "$buildDir/reports/jacoco"
}

task fullCoverageReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport', 'clearJacocoReport']) {
	// create swimLaneGroup for gradle, can check all tasks with `gradle tasks --all`, or `./gradlew tasks --all`
	group "Reporting"
	description "Creates full Unit and Instrumentation Test coverage report"

	// Removes generated coverage reported by Android for Instrumentation tests
	// so we do not mistake /reports/coverage as our coverage report. See above
	// task documentation for location of coverage report.
	doLast {
		def out = services.get(StyledTextOutputFactory).create("colored-output")
		delete "$buildDir/reports/coverage"

		out.style(Style.Normal).text("Report can be found at ").style(Style.Identifier).text("file://$buildDir/reports/jacoco/$name/html/index.html").println()
	}

	reports {
		xml.enabled = true
		html.enabled = true
	}

	// TODO: research which files should be ignored in coverage report
	def fileFilter = [
			'**/*JsonAdapter*',  // generated by Moshi
			'com/example/di/**/*',
			'**/*Module*'
	]
	def mainSrc = "$projectDir/src/main/java"

	classDirectories = fileTree(dir: "$buildDir/tmp/kotlin-classes/debug/", excludes: fileFilter)

	sourceDirectories = files([mainSrc])

	// Data taken is from both jacoco Unit tests, and Android Instrumentation tests
	executionData = fileTree(dir: "$buildDir", includes: [
			"jacoco/testDebugUnitTest.exec",
			"outputs/code_coverage/debugAndroidTest/connected/**/*.ec",
			"outputs/code-coverage/connected/**/*.ec"
	])
}

dependencies {
	implementation fileTree(dir: 'libs', include: ['*.jar'])
	implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${libraries.kotlin}"
	implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${libraries.coroutines}"
	implementation "androidx.appcompat:appcompat:${libraries.appcompat}"
	implementation "androidx.core:core-ktx:1.0.2"


	implementation "androidx.test:core:${libraries.androidTestCore}"

	def shared = [
			"androidx.arch.core:core-testing:${libraries.androidArch}",
			"androidx.test:monitor:${libraries.androidMonitor}",
			"androidx.test.ext:junit:1.1.1",
			"org.mockito:mockito-core:${libraries.mockitoCore}",
			"com.nhaarman.mockitokotlin2:mockito-kotlin:${libraries.mockitoKotlin}",
			"com.google.truth:truth:${libraries.truth}",
			"org.jetbrains.kotlinx:kotlinx-coroutines-test:${libraries.coroutines}"
	]

	for (item in shared) {
		testImplementation item
		androidTestImplementation item
	}

	implementation "androidx.test:monitor:${libraries.androidMonitor}"

	testImplementation "junit:junit:${libraries.junit}"

	androidTestImplementation "androidx.test.espresso:espresso-core:${libraries.espresso}"

	implementation "androidx.constraintlayout:constraintlayout:${libraries.constraintLayout}"
	implementation "androidx.recyclerview:recyclerview:${libraries.recyclerView}"
	implementation "androidx.lifecycle:lifecycle-extensions:${libraries.lifecycle}"

	implementation "com.google.dagger:dagger:${libraries.dagger}"
	implementation "com.google.dagger:dagger-android:${libraries.daggerAndroid}"
	implementation "com.google.dagger:dagger-android-support:${libraries.daggerAndroid}"

	kapt "com.google.dagger:dagger-android-processor:${libraries.daggerAndroid}"
	kapt "com.google.dagger:dagger-compiler:${libraries.daggerAndroid}"

	kaptAndroidTest "com.google.dagger:dagger-android-processor:${libraries.daggerAndroid}"
	kaptAndroidTest "com.google.dagger:dagger-compiler:${libraries.daggerAndroid}"

	implementation "com.squareup.retrofit2:retrofit:${libraries.retrofit}"

	testImplementation "org.robolectric:robolectric:${libraries.robolectric}"

	testImplementation "org.jetbrains.kotlin:kotlin-reflect:${libraries.kotlin}"

	//noinspection GradleDependency
	implementation "androidx.fragment:fragment-testing:${libraries.fragmentTesting}"

	//noinspection GradleDependency
	implementation "androidx.navigation:navigation-fragment-ktx:${libraries.navigation}"

	//noinspection GradleDependency
	implementation "androidx.navigation:navigation-ui-ktx:${libraries.navigation}"

	implementation "androidx.room:room-runtime:${libraries.room}"
	kapt "androidx.room:room-compiler:${libraries.room}"

	implementation "androidx.room:room-ktx:${libraries.room}"
	testImplementation "androidx.room:room-testing:${libraries.room}"

	implementation "com.squareup.moshi:moshi:${libraries.moshi}"
	kapt "com.squareup.moshi:moshi-kotlin-codegen:${libraries.moshi}"

	implementation "com.jakewharton.timber:timber:${libraries.timber}"
	implementation "com.squareup.retrofit2:converter-moshi:${libraries.moshiConverter}"
}

android.applicationVariants.all {
	def aptOutputDir = new File(buildDir, "generated/source/apt/${it.unitTestVariant.dirName}")
	it.unitTestVariant.addJavaSourceFoldersToModel(aptOutputDir)
}
